// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
    id                 Int @id @default(autoincrement())
    name               String
    email              String @unique
    password           String
    avatar             String?
    about              String?
    following          Follow[]  @relation("Following")
    followers          Follow[]  @relation("Followers")
    created_at         DateTime @default(now())
    updated_at         DateTime @updatedAt
    friends            Chat[] @relation("ChatFriends")
    chats              Chat[] @relation("ChatSender")
    messages           Message[] @relation("MessageSender")
    posts              Post[] 
    votes              Vote[]
    savedPost          SavedPost[] 
    comments           Comment[]
    replayToComment    ReplayToComment[]
    repliesToReplies   ReplayToReplayComment[] @relation("ReplyAuthor")
    repliesReceived    ReplayToReplayComment[] @relation("ReplayedToAuthor")
    commentVote        CommentVote[]
    replayToCommentVote ReplayToCommentVote[]
    replayToReplyCommentVote ReplayToReplyCommentVote[]
}

model Chat {
    id                 Int @id @default(autoincrement())
    friends            User[] @relation("ChatFriends")
    messages           Message[]
    lastMessage        String
    senderId           Int
    sender             User @relation("ChatSender", fields: [senderId], references: [id])
    created_at         DateTime @default(now())
    updated_at         DateTime @updatedAt
}

model Message {
    id                 Int @id @default(autoincrement())
    chat_id            Int
    chat               Chat  @relation(fields: [chat_id],references: [id]) 
    text               String
    created_at         DateTime @default(now())
    updated_at         DateTime @updatedAt
    senderId           Int
    sender             User @relation("MessageSender",fields: [senderId], references: [id])
}

model Post {
    id                 Int @id @default(autoincrement())
    text               String
    created_at         DateTime @default(now())
    updated_at         DateTime @updatedAt
    image              String?
    author             User @relation(fields: [authorId], references: [id])
    authorId           Int
    vote               Vote[]
    savedPost          SavedPost[] 
    comments           Comment[]
}


model Follow {
    id                 Int      @id @default(autoincrement())
    followerId         Int
    followingId        Int
    follower           User     @relation("Followers", fields: [followerId], references: [id])
    following          User     @relation("Following", fields: [followingId], references: [id])
    created_at         DateTime @default(now())

    @@unique([followerId, followingId])
}


model Vote {
   id              Int      @id @default(autoincrement())
   created_at      DateTime @default(now())
   vote            String
   post_id         Int
   author_id       Int
   author          User  @relation(fields: [author_id], references: [id])
   post            Post  @relation(fields: [post_id], references: [id])
}


model SavedPost {
   id              Int      @id @default(autoincrement())
   created_at      DateTime @default(now())
   post_id         Int
   author_id       Int
   author          User  @relation(fields: [author_id], references: [id])
   post            Post  @relation(fields: [post_id], references: [id])
}

model Comment {
   id              Int      @id @default(autoincrement())
   created_at      DateTime @default(now())
   text            String
   post_id         Int
   author_id       Int
   author          User  @relation(fields: [author_id], references: [id])
   post            Post  @relation(fields: [post_id], references: [id])
   replayedComment ReplayToComment[]
   vote            CommentVote[]
}

model ReplayToComment {
   id              Int      @id @default(autoincrement())
   created_at      DateTime @default(now())
   text            String
   comment_id      Int
   author_id       Int
   author          User  @relation(fields: [author_id], references: [id])
   comment         Comment  @relation(fields: [comment_id], references: [id])
   replies         ReplayToReplayComment[] @relation("ReplayToReplayCommentReplies")
   upvotes         Int @default(0)
   disvotes        Int @default(0)
   vote            ReplayToCommentVote[]

}

model ReplayToReplayComment {
   id                     Int      @id @default(autoincrement())
   created_at             DateTime @default(now())
   text                   String
   replay_to_author_id    Int
   replay_to_author       User     @relation("ReplayedToAuthor", fields: [replay_to_author_id], references: [id])
   author_id              Int
   author                 User     @relation("ReplyAuthor", fields: [author_id], references: [id])
   replay_to_comment_id   Int
   replay_to_comment      ReplayToComment @relation("ReplayToReplayCommentReplies", fields: [replay_to_comment_id], references: [id])

   replayToReplyCommentVote ReplayToReplyCommentVote[]  
}


model CommentVote {
   id              Int      @id @default(autoincrement())
   created_at      DateTime @default(now())
   vote            String
   comment_id      Int
   author_id       Int
   author          User  @relation(fields: [author_id], references: [id])
   comment         Comment  @relation(fields: [comment_id], references: [id])
}



model ReplayToCommentVote {
   id                       Int      @id @default(autoincrement())
   created_at               DateTime @default(now())
   vote                     String
   reply_to_comment_id      Int
   author_id                Int
   author                   User  @relation(fields: [author_id], references: [id])
   reply_to_comment         ReplayToComment  @relation(fields: [reply_to_comment_id], references: [id])
}

model ReplayToReplyCommentVote {
   id                             Int      @id @default(autoincrement())
   created_at                     DateTime @default(now())
   vote                           String
   reply_to_reply_comment_id      Int
   author_id                      Int
   author                         User  @relation(fields: [author_id], references: [id])
   reply_to_reply_comment         ReplayToReplayComment  @relation(fields: [reply_to_reply_comment_id], references: [id])
}
